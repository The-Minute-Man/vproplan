{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaaz\\\\FPS\\\\futurite\\\\src\\\\Planner.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GUI } from 'dat.gui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Planner() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const geometry = new THREE.BoxGeometry(10000, 10, 10000);\n    const geometrycolor = new THREE.MeshBasicMaterial({\n      color: 0x32a852\n    });\n    const geometrymesh = new THREE.Mesh(geometry, geometrycolor);\n    geometrymesh.position.y = 50;\n    scene.add(geometrymesh);\n    const geometry2 = new THREE.BoxGeometry(100, 400, 100);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xFFFF,\n      transparent: true,\n      opacity: 0.5,\n      depthWrite: false\n    });\n    const fog = new THREE.Mesh(geometry2, material);\n    fog.position.y = 100;\n    scene.add(fog);\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    camera.position.set(0, 20, 100);\n    const geometren = new THREE.PlaneGeometry(15000, 15000, 100, 100);\n    geometren.rotateX(-Math.PI / 2);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setClearColor(0x0ebee6);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.shadowMap.enabled = true; // Enable shadow maps\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap; // Smoother shadows\n    mountRef.current.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    controls.enableZoom = true;\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(0, 1, -1);\n    scene.add(directionalLight);\n    const material2 = new THREE.MeshStandardMaterial({\n      color: 0x00aaff,\n      roughness: 0.6,\n      metalness: 0.1\n    });\n    const plane = new THREE.Mesh(geometren, material2);\n    plane.receiveShadow = true;\n    plane.castShadow = true; // Plane can cast shadow on itself for realistic wave shadows\n    scene.add(plane);\n\n    // Add a directional light with shadows\n    const light = new THREE.DirectionalLight(0xffffff, 1);\n    light.position.set(5, 10, 7);\n    light.castShadow = true;\n    light.shadow.mapSize.width = 2048;\n    light.shadow.mapSize.height = 2048;\n    light.shadow.camera.near = 0.5;\n    light.shadow.camera.far = 50;\n    scene.add(light);\n    const gui = new GUI();\n    const waveSettings = {\n      amplitude: 10.0,\n      frequency: 10.0,\n      speed: 2,\n      color: 0x00aaff\n    };\n    gui.add(waveSettings, 'amplitude', 0.1, 100.0).onChange(value => {\n      waveSettings.amplitude = value;\n    });\n    gui.add(waveSettings, 'frequency', 0.5, 50.0).onChange(value => {\n      waveSettings.frequency = value;\n    });\n    gui.add(waveSettings, 'speed', 0.1, 30.0).onChange(value => {\n      waveSettings.speed = value;\n    });\n    gui.addColor(waveSettings, 'color').onChange(value => {\n      material2.color.set(value);\n    });\n    function animateWave(time) {\n      const positions = geometren.attributes.position.array;\n      const uTime = time * 0.001 * waveSettings.speed;\n      for (let i = 0; i < positions.length; i += 3) {\n        const z = positions[i + 2];\n        positions[i + 1] = Math.sin(z * waveSettings.frequency + uTime) * waveSettings.amplitude;\n      }\n      geometren.attributes.position.needsUpdate = true;\n      geometren.computeVertexNormals(); // Update normals for accurate lighting/shadow on wave\n\n      controls.update();\n      renderer.render(scene, camera);\n      requestAnimationFrame(animateWave);\n    }\n    animateWave();\n    window.addEventListener('resize', () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n    });\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      controls.dispose();\n      renderer.dispose();\n      mountRef.current.removeChild(renderer.domElement);\n      scene.clear(); // Clear objects from the scene\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 12\n  }, this);\n}\n_s(Planner, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = Planner;\nexport default Planner;\nvar _c;\n$RefreshReg$(_c, \"Planner\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","GUI","jsxDEV","_jsxDEV","Planner","_s","mountRef","scene","Scene","geometry","BoxGeometry","geometrycolor","MeshBasicMaterial","color","geometrymesh","Mesh","position","y","add","geometry2","material","transparent","opacity","depthWrite","fog","camera","PerspectiveCamera","window","innerWidth","innerHeight","set","geometren","PlaneGeometry","rotateX","Math","PI","renderer","WebGLRenderer","setClearColor","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","type","PCFSoftShadowMap","current","appendChild","domElement","controls","enableDamping","dampingFactor","enableZoom","ambientLight","AmbientLight","directionalLight","DirectionalLight","material2","MeshStandardMaterial","roughness","metalness","plane","receiveShadow","castShadow","light","shadow","mapSize","width","height","near","far","gui","waveSettings","amplitude","frequency","speed","onChange","value","addColor","animateWave","time","positions","attributes","array","uTime","i","length","z","sin","needsUpdate","computeVertexNormals","update","render","requestAnimationFrame","addEventListener","aspect","updateProjectionMatrix","handleResize","animate","removeEventListener","dispose","removeChild","clear","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shaaz/FPS/futurite/src/Planner.jsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GUI } from 'dat.gui';\r\n\r\nfunction Planner() {\r\n    const mountRef = useRef(null)\r\n    useEffect(() => {\r\n        const scene = new THREE.Scene();\r\n        const geometry = new THREE.BoxGeometry(10000,10, 10000)\r\n        const geometrycolor = new THREE.MeshBasicMaterial({color: 0x32a852})\r\n        const geometrymesh = new THREE.Mesh(geometry, geometrycolor)\r\n        geometrymesh.position.y = 50\r\n        scene.add(geometrymesh)\r\n        const geometry2 = new THREE.BoxGeometry(100,400,100)\r\n        const material = new THREE.MeshBasicMaterial({color: 0xFFFF, transparent: true, opacity: 0.5, depthWrite: false})\r\n        const fog = new THREE.Mesh(geometry2, material)\r\n        fog.position.y = 100\r\n        scene.add(fog)\r\n\r\n        const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\r\n        camera.position.set(0, 20, 100);\r\n\r\n        \r\n\r\n        const geometren = new THREE.PlaneGeometry(15000, 15000, 100, 100);\r\n        geometren.rotateX(-Math.PI / 2);\r\n\r\n        \r\n\r\n        const renderer = new THREE.WebGLRenderer();\r\n        renderer.setClearColor(0x0ebee6)\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.shadowMap.enabled = true;  // Enable shadow maps\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;  // Smoother shadows\r\n        mountRef.current.appendChild(renderer.domElement);\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = true;\r\n        controls.dampingFactor = 0.1;\r\n        controls.enableZoom = true;\r\n\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        scene.add(ambientLight);\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        directionalLight.position.set(0,1,-1);\r\n        scene.add(directionalLight);\r\n        \r\n\r\n        const material2 = new THREE.MeshStandardMaterial({\r\n            color: 0x00aaff,\r\n            roughness: 0.6,\r\n            metalness: 0.1,\r\n        });\r\n    \r\n        const plane = new THREE.Mesh(geometren, material2);\r\n        plane.receiveShadow = true;\r\n        plane.castShadow = true;  // Plane can cast shadow on itself for realistic wave shadows\r\n        scene.add(plane);\r\n    \r\n        // Add a directional light with shadows\r\n        const light = new THREE.DirectionalLight(0xffffff, 1);\r\n        light.position.set(5, 10, 7);\r\n        light.castShadow = true;\r\n        light.shadow.mapSize.width = 2048;\r\n        light.shadow.mapSize.height = 2048;\r\n        light.shadow.camera.near = 0.5;\r\n        light.shadow.camera.far = 50;\r\n        scene.add(light);\r\n    \r\n\r\n       \r\n        \r\n\r\n        const gui = new GUI();\r\n        const waveSettings = {\r\n            amplitude: 10.0,\r\n            frequency: 10.0,\r\n            speed: 2,\r\n            color: 0x00aaff,\r\n        };\r\n    \r\n        gui.add(waveSettings, 'amplitude', 0.1, 100.0).onChange(value => {\r\n            waveSettings.amplitude = value;\r\n        });\r\n        gui.add(waveSettings, 'frequency', 0.5, 50.0).onChange(value => {\r\n            waveSettings.frequency = value;\r\n        });\r\n        gui.add(waveSettings, 'speed', 0.1, 30.0).onChange(value => {\r\n            waveSettings.speed = value;\r\n        });\r\n        gui.addColor(waveSettings, 'color').onChange(value => {\r\n            material2.color.set(value);\r\n        });\r\n    \r\n        function animateWave(time) {\r\n            const positions = geometren.attributes.position.array;\r\n            const uTime = time * 0.001 * waveSettings.speed;\r\n    \r\n            for (let i = 0; i < positions.length; i += 3) {\r\n                const z = positions[i + 2];\r\n                positions[i + 1] = \r\n                                   Math.sin(z * waveSettings.frequency + uTime) * waveSettings.amplitude;\r\n            }\r\n            \r\n            geometren.attributes.position.needsUpdate = true;\r\n            geometren.computeVertexNormals();  // Update normals for accurate lighting/shadow on wave\r\n    \r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n            requestAnimationFrame(animateWave);\r\n        }\r\n    \r\n        animateWave();\r\n    \r\n        window.addEventListener('resize', () => {\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n        });\r\n        \r\n        const handleResize = () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n        \r\n        // Animation loop\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n            \r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            controls.dispose();\r\n            renderer.dispose();\r\n            mountRef.current.removeChild(renderer.domElement);\r\n            scene.clear(); // Clear objects from the scene\r\n        };\r\n    }, [])\r\n    return <div ref={mountRef}></div>\r\n}\r\n\r\nexport default Planner"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}