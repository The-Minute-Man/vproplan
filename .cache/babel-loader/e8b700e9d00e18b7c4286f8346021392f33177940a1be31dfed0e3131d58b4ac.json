{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nfunction Planner() {\n  const container = document.querySelector('#scene-container');\n\n  // create a Scene\n  const scene = new THREE.Scene();\n\n  // Set the background color\n  scene.background = new THREE.Color('skyblue');\n\n  // Create a camera\n  const fov = 35; // AKA Field of View\n  const aspect = container.clientWidth / container.clientHeight;\n  const near = 0.1; // the near clipping plane\n  const far = 100; // the far clipping plane\n\n  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n  // every object is initially created at ( 0, 0, 0 )\n  // move the camera back so we can view the scene\n  camera.position.set(0, 0, 10);\n\n  // create a geometry\n  const geometry = new THREE.BoxGeometry(2, 2, 2);\n\n  // create a default (white) Basic material\n  const material = new THREE.MeshBasicMaterial();\n\n  // create a Mesh containing the geometry and material\n  const cube = new THREE.Mesh(geometry, material);\n\n  // add the mesh to the scene\n  scene.add(cube);\n\n  // create the renderer\n  const renderer = new THREE.WebGLRenderer();\n\n  // next, set the renderer to the same size as our container element\n  renderer.setSize(container.clientWidth, container.clientHeight);\n\n  // finally, set the pixel ratio so that our scene will look good on HiDPI displays\n  renderer.setPixelRatio(window.devicePixelRatio);\n\n  // add the automatically created <canvas> element to the page\n  container.append(renderer.domElement);\n\n  // render, or 'create a still image', of the scene\n  renderer.render(scene, camera);\n}\n_c = Planner;\nexport default Planner;\nvar _c;\n$RefreshReg$(_c, \"Planner\");","map":{"version":3,"names":["THREE","OrbitControls","Planner","container","document","querySelector","scene","Scene","background","Color","fov","aspect","clientWidth","clientHeight","near","far","camera","PerspectiveCamera","position","set","geometry","BoxGeometry","material","MeshBasicMaterial","cube","Mesh","add","renderer","WebGLRenderer","setSize","setPixelRatio","window","devicePixelRatio","append","domElement","render","_c","$RefreshReg$"],"sources":["C:/Users/shaaz/FPS/futurite/src/Planner.jsx"],"sourcesContent":["import * as THREE from 'three'\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nfunction Planner() {\r\n    const container = document.querySelector('#scene-container');\r\n\r\n    // create a Scene\r\n    const scene = new THREE.Scene();\r\n    \r\n    // Set the background color\r\n    scene.background = new THREE.Color('skyblue');\r\n    \r\n    // Create a camera\r\n    const fov = 35; // AKA Field of View\r\n    const aspect = container.clientWidth / container.clientHeight;\r\n    const near = 0.1; // the near clipping plane\r\n    const far = 100; // the far clipping plane\r\n    \r\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n    \r\n    // every object is initially created at ( 0, 0, 0 )\r\n    // move the camera back so we can view the scene\r\n    camera.position.set(0, 0, 10);\r\n    \r\n    // create a geometry\r\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n    \r\n    // create a default (white) Basic material\r\n    const material = new THREE.MeshBasicMaterial();\r\n    \r\n    // create a Mesh containing the geometry and material\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    \r\n    // add the mesh to the scene\r\n    scene.add(cube);\r\n    \r\n    // create the renderer\r\n    const renderer = new THREE.WebGLRenderer();\r\n    \r\n    // next, set the renderer to the same size as our container element\r\n    renderer.setSize(container.clientWidth, container.clientHeight);\r\n    \r\n    // finally, set the pixel ratio so that our scene will look good on HiDPI displays\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    \r\n    // add the automatically created <canvas> element to the page\r\n    container.append(renderer.domElement);\r\n    \r\n    // render, or 'create a still image', of the scene\r\n    renderer.render(scene, camera);\r\n}\r\n\r\nexport default Planner"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,aAAa,QAAQ,2CAA2C;AAEzE,SAASC,OAAOA,CAAA,EAAG;EACf,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,kBAAkB,CAAC;;EAE5D;EACA,MAAMC,KAAK,GAAG,IAAIN,KAAK,CAACO,KAAK,CAAC,CAAC;;EAE/B;EACAD,KAAK,CAACE,UAAU,GAAG,IAAIR,KAAK,CAACS,KAAK,CAAC,SAAS,CAAC;;EAE7C;EACA,MAAMC,GAAG,GAAG,EAAE,CAAC,CAAC;EAChB,MAAMC,MAAM,GAAGR,SAAS,CAACS,WAAW,GAAGT,SAAS,CAACU,YAAY;EAC7D,MAAMC,IAAI,GAAG,GAAG,CAAC,CAAC;EAClB,MAAMC,GAAG,GAAG,GAAG,CAAC,CAAC;;EAEjB,MAAMC,MAAM,GAAG,IAAIhB,KAAK,CAACiB,iBAAiB,CAACP,GAAG,EAAEC,MAAM,EAAEG,IAAI,EAAEC,GAAG,CAAC;;EAElE;EACA;EACAC,MAAM,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;;EAE7B;EACA,MAAMC,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;EAE/C;EACA,MAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,iBAAiB,CAAC,CAAC;;EAE9C;EACA,MAAMC,IAAI,GAAG,IAAIxB,KAAK,CAACyB,IAAI,CAACL,QAAQ,EAAEE,QAAQ,CAAC;;EAE/C;EACAhB,KAAK,CAACoB,GAAG,CAACF,IAAI,CAAC;;EAEf;EACA,MAAMG,QAAQ,GAAG,IAAI3B,KAAK,CAAC4B,aAAa,CAAC,CAAC;;EAE1C;EACAD,QAAQ,CAACE,OAAO,CAAC1B,SAAS,CAACS,WAAW,EAAET,SAAS,CAACU,YAAY,CAAC;;EAE/D;EACAc,QAAQ,CAACG,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;;EAE/C;EACA7B,SAAS,CAAC8B,MAAM,CAACN,QAAQ,CAACO,UAAU,CAAC;;EAErC;EACAP,QAAQ,CAACQ,MAAM,CAAC7B,KAAK,EAAEU,MAAM,CAAC;AAClC;AAACoB,EAAA,GA/CQlC,OAAO;AAiDhB,eAAeA,OAAO;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}